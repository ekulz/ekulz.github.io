{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleClick","link","window","open","className","Container","text","textAlign","Segment","basic","size","Header","as","icon","color","Icon","name","circular","Content","Divider","role","aria-label","Button","onClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUAqEeA,EAjEH,WAEV,IAAMC,EAAc,SAACC,GACnBC,OAAOC,KAAKF,EAAM,WAGpB,OACE,yBAAKG,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWC,MAAI,EAACC,UAAU,UAExB,kBAACC,EAAA,EAAD,CAASC,OAAK,EAACL,UAAU,gBAAgBM,KAAK,QAC5C,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAI,EAACN,UAAU,SAASO,MAAM,QAC5C,kBAACC,EAAA,EAAD,CAAMC,KAAK,WAAWC,UAAQ,IAC9B,kBAACN,EAAA,EAAOO,QAAR,sBAIJ,kBAACC,EAAA,EAAD,CAASf,UAAU,kBAEnB,kBAACI,EAAA,EAAD,CAASC,OAAK,EAACC,KAAK,QAAQH,UAAU,UACpC,sCACU,mCADV,IAEE,0BAAMa,KAAK,MAAMC,aAAW,QAA5B,iBAEF,8DAEE,0BAAMD,KAAK,MAAMC,aAAW,WAA5B,6BAEF,2EAC+C,mCAD/C,IAEE,0BAAMD,KAAK,MAAMC,aAAW,UAA5B,iBAEF,0GAEE,0BAAMD,KAAK,MAAMC,aAAW,aAA5B,iBACF,wHAC0F,6BAD1F,0FAEyF,6BAFzF,UAGS,mCAHT,0DAIE,0BAAMD,KAAK,MAAMC,aAAW,cAA5B,kBAIJ,kBAACF,EAAA,EAAD,MAEA,kBAACX,EAAA,EAAD,CAASC,OAAK,EAACC,KAAK,SAClB,0EACA,6BACE,kBAACY,EAAA,EAAD,CAAQR,MAAM,QAAQS,QAAS,kBAAMvB,EAAY,8BAC/C,kBAACe,EAAA,EAAD,CAAMC,KAAK,WADb,WAGA,kBAACM,EAAA,EAAD,CAAQR,MAAM,WAAWS,QAAS,kBAAMvB,EAAY,0CAClD,kBAACe,EAAA,EAAD,CAAMC,KAAK,aADb,aAGA,kBAACM,EAAA,EAAD,CAAQR,MAAM,UAAUS,QAAS,kBAAMvB,EAAY,kCACjD,kBAACe,EAAA,EAAD,CAAMC,KAAK,YADb,iBC9CQQ,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9f5b8226.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Container, Header, Divider, Icon, Segment, Button } from 'semantic-ui-react'\n\nconst App = () => {\n  \n  const handleClick = (link) => {\n    window.open(link, '_blank');\n  };\n\n  return (\n    <div className=\"App\">\n      <Container text textAlign='center'>\n\n        <Segment basic className='segmentHeader' size='huge'>\n          <Header as='h1' icon textAlign='center' color='blue'>\n            <Icon name='terminal' circular/>\n            <Header.Content>Luke Hickin</Header.Content>\n          </Header>\n        </Segment>\n\n        <Divider className='dividerHeader'/>\n\n        <Segment basic size='large' textAlign='center'>\n          <p>\n            Hi, I'm <b>Luke</b>. \n            <span role=\"img\" aria-label=\"wave\">👋</span>\n          </p>\n          <p>\n            I live in Auckland, New Zealand. \n            <span role=\"img\" aria-label=\"flag-nz\">🇳🇿</span>\n          </p>\n          <p>\n            I'm a software engineer currently working at <b>Xero</b>. \n            <span role=\"img\" aria-label=\"laptop\">💻</span>\n          </p>\n          <p>\n            I love doing dev, I love doing ops, but it's even better when I can do both. \n            <span role=\"img\" aria-label=\"nerd-face\">🤓</span></p>\n          <div>\n            In my spare time, you'll find me hanging out with my friends, gaming, or playing soccer.<br></br>\n            I'm a keen snowboarder in the winter, and to keep fit I've started learning kickboxing.<br></br>\n            I also <b>love</b> cars. Like, a lot. My current daily is a BMW E90 330i. \n            <span role=\"img\" aria-label=\"heart-eyes\">😍</span>\n          </div>\n        </Segment>\n\n        <Divider />\n\n        <Segment basic size='large'>\n          <p>Get in touch, I'd love to connect with you:</p>\n          <div>\n            <Button color='black' onClick={() => handleClick('https://github.com/ekulz')}>\n              <Icon name='github' /> Github\n            </Button>\n            <Button color='linkedin' onClick={() => handleClick('https://www.linkedin.com/in/lhickin/')}>\n              <Icon name='linkedin' /> LinkedIn\n            </Button>\n            <Button color='twitter' onClick={() => handleClick('https://twitter.com/lukeee_h')}>\n              <Icon name='twitter' /> Twitter\n            </Button>\n          </div>\n        </Segment>\n\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}