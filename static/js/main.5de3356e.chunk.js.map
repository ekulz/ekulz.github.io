{"version":3,"sources":["components/DarkModeToggle.js","components/MenuBar.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["DarkModeToggle","darkMode","useDarkMode","checked","value","onChange","toggle","icons","role","aria-label","style","unchecked","MenuBar","useState","activeItem","updateActiveItem","menuClass","classNames","Menu","className","Item","name","active","onClick","position","Home","handleClick","link","window","open","Container","text","textAlign","Segment","basic","size","Header","as","icon","color","Image","circular","src","Content","Subheader","Divider","href","Button","Icon","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAmBeA,EAfQ,WACrB,IAAMC,EAAWC,aAAY,GAE7B,OACE,6BACE,kBAAC,IAAD,CACEC,QAASF,EAASG,MAClBC,SAAUJ,EAASK,OACnBC,MACE,CAACJ,QAAS,0BAAMK,KAAK,MAAMC,aAAW,MAAMC,MAAO,CAAC,cAAc,QAAxD,gBACVC,UAAW,0BAAMH,KAAK,MAAMC,aAAW,SAA5B,qBCcNG,EAtBC,WAAO,IAAD,EACqBC,mBAAS,QAD9B,mBACXC,EADW,KACCC,EADD,KAEZd,EAAWC,aAAY,GAEzBc,EAAYC,IAAW,YAAa,WAAY,CAAE,SAAYhB,EAASG,QAE3E,OACI,kBAACc,EAAA,EAAD,CAAMC,UAAWH,GACf,kBAACE,EAAA,EAAKE,KAAN,CACEC,KAAK,OACLC,OAAuB,SAAfR,EACRS,QAAS,kBAAMR,EAAiB,WAElC,kBAACG,EAAA,EAAKA,KAAN,CAAWM,SAAS,SAClB,kBAACN,EAAA,EAAKE,KAAN,KACE,kBAAC,EAAD,U,8DCuCCK,EAzDF,WAEX,IAAMC,EAAc,SAACC,GACnBC,OAAOC,KAAKF,EAAM,WAGpB,OACE,kBAACG,EAAA,EAAD,CAAWC,MAAI,EAACC,UAAU,UACxB,kBAACC,EAAA,EAAD,CAASC,OAAK,EAACf,UAAU,gBAAgBgB,KAAK,QAC5C,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAI,EAACN,UAAU,SAASO,MAAM,QAC5C,kBAACC,EAAA,EAAD,CAAOC,UAAQ,EAACC,IAAI,SAAShC,MAAO,CAAC,SAAW,MAChD,kBAAC0B,EAAA,EAAOO,QAAR,oBACA,kBAACP,EAAA,EAAOQ,UAAR,uCAIJ,kBAACC,EAAA,EAAD,CAAS1B,UAAU,kBAEnB,kBAACc,EAAA,EAAD,CAASC,OAAK,EAACC,KAAK,QAAQH,UAAU,QACpC,sCACU,mCADV,IAEE,0BAAMxB,KAAK,MAAMC,aAAW,QAA5B,kBAEF,uEAEE,0BAAMD,KAAK,MAAMC,aAAW,WAA5B,8BAEF,yCACa,gDADb,8BACgE,kCADhE,8CAE2C,0BAAMD,KAAK,MAAMC,aAAW,SAA5B,iBAE3C,iJAEgE,uBAAGqC,KAAM,iCAAT,iBAIlE,kBAACD,EAAA,EAAD,MAEA,kBAACZ,EAAA,EAAD,CAASC,OAAK,EAACC,KAAK,SAClB,0EACA,6BACE,kBAACY,EAAA,EAAD,CAAQR,MAAM,QAAQhB,QAAS,kBAAMG,EAAY,8BAC/C,kBAACsB,EAAA,EAAD,CAAM3B,KAAK,WADb,WAGA,kBAAC0B,EAAA,EAAD,CAAQR,MAAM,WAAWhB,QAAS,kBAAMG,EAAY,0CAClD,kBAACsB,EAAA,EAAD,CAAM3B,KAAK,aADb,aAGA,kBAAC0B,EAAA,EAAD,CAAQR,MAAM,UAAUhB,QAAS,kBAAMG,EAAY,kCACjD,kBAACsB,EAAA,EAAD,CAAM3B,KAAK,YADb,gBCrCK4B,EATH,WACV,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc+B,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5de3356e.chunk.js","sourcesContent":["import React from 'react';\nimport useDarkMode from 'use-dark-mode';\nimport Toggle from 'react-toggle'\n\nconst DarkModeToggle = () => {\n  const darkMode = useDarkMode(false);\n\n  return (\n    <div>\n      <Toggle \n        checked={darkMode.value} \n        onChange={darkMode.toggle} \n        icons={\n          {checked: <span role=\"img\" aria-label=\"day\" style={{'padding-top':'2px'}}>🌙</span>,\n          unchecked: <span role=\"img\" aria-label=\"night\">☀️</span>}}/>\n    </div>\n  );\n};\n\nexport default DarkModeToggle;","import React, { useState }  from 'react'\nimport { Menu } from 'semantic-ui-react'\nimport classNames from 'classnames'\nimport useDarkMode from 'use-dark-mode';\nimport DarkModeToggle from './DarkModeToggle'\n\nconst MenuBar = () => {\n    const [activeItem, updateActiveItem] = useState('home');\n    const darkMode = useDarkMode(false);\n\n    var menuClass = classNames('secondary', 'pointing', { 'inverted': darkMode.value} );\n\n    return (\n        <Menu className={menuClass}>\n          <Menu.Item\n            name='home'\n            active={activeItem === 'home'}\n            onClick={() => updateActiveItem('home')}\n          />\n          <Menu.Menu position='right'>\n            <Menu.Item>\n              <DarkModeToggle/>\n            </Menu.Item>\n          </Menu.Menu>\n        </Menu>\n    );\n};\n\nexport default MenuBar;","import React from 'react'\nimport { Header, Segment, Image, Container, Divider, Icon, Button } from 'semantic-ui-react'\n\nconst Home = () => {\n\n  const handleClick = (link) => {\n    window.open(link, '_blank');\n  };\n\n  return (\n    <Container text textAlign='center'>\n      <Segment basic className='segmentHeader' size='huge'>\n        <Header as='h1' icon textAlign='center' color='blue'>\n          <Image circular src='me.jpg' style={{'fontSize':50}}/>\n          <Header.Content>Luke Hickin</Header.Content>\n          <Header.Subheader>Full Stack Software Engineer</Header.Subheader>\n        </Header>\n      </Segment>\n\n      <Divider className='dividerHeader'/>\n\n      <Segment basic size='large' textAlign='left'>\n        <p>\n          Hi, I'm <b>Luke</b>. \n          <span role=\"img\" aria-label=\"wave\"> 👋</span>\n        </p>\n        <p>\n          I recently moved to Vancouver BC, Canada!\n          <span role=\"img\" aria-label=\"flag-ca\"> 🇨🇦</span>\n        </p>\n        <p>\n          I looooove <b>building software</b>, and I have a passion for <b>ops</b>. \n          My ideal role is one where I can do both <span role=\"img\" aria-label=\"blush\">😊</span>\n        </p>\n        <p>\n          I'm currently looking for opportunities in the area. \n          If you are looking for an Engineer, please don't hesistate to <a href={\"mailto:lukehickin@hotmail.com\"}>contact me!</a>\n        </p>\n      </Segment>\n\n      <Divider />\n\n      <Segment basic size='large'>\n        <p>Get in touch, I'd love to connect with you:</p>\n        <div>\n          <Button color='black' onClick={() => handleClick('https://github.com/ekulz')}>\n            <Icon name='github' /> Github\n          </Button>\n          <Button color='linkedin' onClick={() => handleClick('https://www.linkedin.com/in/lhickin/')}>\n            <Icon name='linkedin' /> LinkedIn\n          </Button>\n          <Button color='twitter' onClick={() => handleClick('https://twitter.com/lukeee_h')}>\n            <Icon name='twitter' /> Twitter\n          </Button>\n        </div>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport MenuBar from './components/MenuBar'\nimport Home from './components/Home'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <MenuBar />\n      <Home />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}